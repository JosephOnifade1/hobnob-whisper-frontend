
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';
import Replicate from "https://esm.sh/replicate@0.25.2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

async function generateWithReplicate(prompt: string, aspectRatio = '1:1') {
  const replicate = new Replicate({
    auth: Deno.env.get('REPLICATE_API_KEY'),
  });

  console.log(`Using Replicate API with prompt: "${prompt}", aspect_ratio: "${aspectRatio}"`);

  const output = await replicate.run(
    "black-forest-labs/flux-1.1-pro",
    {
      input: {
        prompt: prompt,
        go_fast: true,
        megapixels: "1",
        num_outputs: 1,
        aspect_ratio: aspectRatio,
        output_format: "webp",
        output_quality: 80,
        num_inference_steps: 4
      }
    }
  );

  console.log("Replicate generation response:", output);

  if (!output || !output[0]) {
    throw new Error('No image generated by Replicate');
  }

  // Download the image and convert to base64
  const imageUrl = output[0];
  const imageResponse = await fetch(imageUrl);
  
  if (!imageResponse.ok) {
    throw new Error(`Failed to download image from Replicate: ${imageResponse.statusText}`);
  }

  const imageData = await imageResponse.arrayBuffer();
  const base64Data = btoa(String.fromCharCode(...new Uint8Array(imageData)));
  
  return base64Data;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? ''
    );

    const { data: { user } } = await supabase.auth.getUser(
      req.headers.get('Authorization')?.replace('Bearer ', '') ?? ''
    );

    if (!user) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { prompt, conversationId, messageId, aspectRatio } = await req.json();

    if (!prompt || !conversationId) {
      return new Response(JSON.stringify({ error: 'Prompt and conversation ID are required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Check if Replicate API key is configured
    if (!Deno.env.get('REPLICATE_API_KEY')) {
      return new Response(JSON.stringify({ 
        error: 'Replicate API key not configured. Please add your REPLICATE_API_KEY in the project settings.' 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Create image generation record
    const { data: generation, error: generationError } = await supabase
      .from('image_generations')
      .insert({
        user_id: user.id,
        conversation_id: conversationId,
        message_id: messageId,
        prompt: prompt,
        status: 'pending'
      })
      .select()
      .single();

    if (generationError) {
      console.error('Error creating generation record:', generationError);
      return new Response(JSON.stringify({ 
        success: false,
        error: 'Failed to create generation record. Please ensure you are logged in and have proper permissions.' 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    try {
      console.log(`Starting image generation with Replicate for prompt: "${prompt}"`);
      
      // Generate image with Replicate
      const base64Data = await generateWithReplicate(prompt, aspectRatio || '1:1');

      // Convert base64 to blob
      const binaryData = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));
      
      // Generate unique filename
      const filename = `${user.id}/${generation.id}.webp`;
      
      // Upload to Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('generated-images')
        .upload(filename, binaryData, {
          contentType: 'image/webp',
          cacheControl: '3600',
          upsert: false
        });

      if (uploadError) {
        console.error('Upload error:', uploadError);
        throw new Error('Failed to upload image to storage');
      }

      // Update generation record with success
      const { error: updateError } = await supabase
        .from('image_generations')
        .update({
          status: 'completed',
          image_path: uploadData.path,
          completed_at: new Date().toISOString()
        })
        .eq('id', generation.id);

      if (updateError) {
        console.error('Error updating generation record:', updateError);
      }

      // Get signed URL for the image
      const { data: signedUrl } = await supabase.storage
        .from('generated-images')
        .createSignedUrl(uploadData.path, 3600);

      return new Response(JSON.stringify({
        success: true,
        imageUrl: signedUrl?.signedUrl,
        generationId: generation.id,
        prompt: prompt,
        provider: 'replicate',
        downloadUrl: signedUrl?.signedUrl
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });

    } catch (error) {
      console.error('Error generating image:', error);
      
      // Update generation record with error
      await supabase
        .from('image_generations')
        .update({
          status: 'failed',
          error_message: error.message,
          completed_at: new Date().toISOString()
        })
        .eq('id', generation.id);

      return new Response(JSON.stringify({ 
        success: false,
        error: error.message.includes('REPLICATE_API_KEY') 
          ? 'Replicate API key not configured properly' 
          : 'Failed to generate image with Replicate'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

  } catch (error) {
    console.error('Function error:', error);
    return new Response(JSON.stringify({ 
      success: false, 
      error: 'Internal server error' 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
